openapi: 3.0.0
info:
  title: School Medical Management System API
  version: 1.0.0
  description: API documentation for School Medical Management System
servers:
  - url: http://localhost:3000/api
paths:
  /auth/google:
    get:
      tags:
        - Authentication
      summary: Redirect to Google OAuth
      description: Redirects the user to Google's OAuth consent screen
      operationId: redirectToGoogleOAuth
      responses:
        '302':
          description: Redirects to Google OAuth URL
  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Handle Google OAuth callback
      description: Processes the Google OAuth callback and returns user information
      operationId: handleGoogleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful authentication with Google
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRequest'
  /auth/login:
    post:
      summary: Login with JWT
      tags:
        - Authentication
      description: Authenticates a user with username and password, returns JWT tokens
      operationId: loginWithJwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=abc123; HttpOnly; SameSite=Strict; Expires=...
              description: Sets refreshToken cookie
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      description: Registers a new user with local authentication
      operationId: registerWithJwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
  /auth/refresh-token:
    post:
      summary: Refresh JWT token
      tags:
        - Authentication
      description: Generates a new access token using a refresh token
      operationId: refreshToken
      responses:
        '200':
          description: Successful token refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /auth/forgot-password:
    post:
      summary: Forgot password
      tags:
        - Authentication
      description: Sends an OTP to the user's email for password reset
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
              required:
                - email
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OTP sent to your email successfully
  /auth/verify-otp:
    post:
      summary: Verify OTP
      tags:
        - Authentication
      description: Verifies the OTP sent to the user's email
      operationId: verifyOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                token:
                  type: string
                  example: "123456"
              required:
                - email
                - token
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OTP verified successfully
                  data:
                    type: object
                    properties:
                      resetToken:
                        type: string
                        example: "a1b2c3d4e5"
  /auth/reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      description: Resets the user's password using the reset token
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                resetToken:
                  type: string
                  example: "a1b2c3d4e5"
                newPassword:
                  type: string
                  format: password
                  example: "NewPassword123!"
                confirmNewPassword:
                  type: string
                  format: password
                  example: "NewPassword123!"
              required:
                - email
                - resetToken
                - newPassword
                - confirmNewPassword
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset successfully
  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      description: Logs out the user by clearing the refresh token cookie
      operationId: logoutUser
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged out successfully
  /user/me:
    get:
      tags:
        - User Controller
      summary: Get user profile
      description: Retrieves a user's profile information
      operationId: getUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    $ref: '#/components/schemas/User'
    put:
      tags:
        - User Controller
      summary: Update user profile
      description: Updates the profile information of a user
      operationId: editProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                dob:
                  type: string
                  example: "31/12/1990"
                  description: Date of birth in DD/MM/YYYY format
                phone:
                  type: string
                  example: "+1234567890"
              required:
                - username
                - dob
                - phone
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User profile updated successfully
                  data:
                    $ref: '#/components/schemas/User'
  /user/me/change-password:
    patch:
      tags:
        - User Controller
      summary: Change user password
      description: Updates the password of a user
      operationId: updatePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: User's current password
                newPassword:
                  type: string
                  format: password
                  description: New password (minimum 6 characters)
                confirmNewPassword:
                  type: string
                  format: password
                  description: Confirmation of the new password
              required:
                - currentPassword
                - newPassword
                - confirmNewPassword
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password updated successfully
  /admin/dashboard:
      get:
        tags:
          - Admin - Dashboard
        summary: Lấy dữ liệu tổng quan cho Dashboard của Admin
        description: Trả về các số liệu thống kê chính cho trang dashboard của quản trị viên, chẳng hạn như số lượng người dùng, học sinh, lớp học và các hoạt động gần đây.
        operationId: getAdminDashboard
        security:
          - BearerAuth: []
        responses:
          '200':
            description: Lấy dữ liệu dashboard thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdminDashboardResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/users:
      get:
        tags:
          - Admin - Quản lý Người dùng & Học sinh
        summary: Lấy danh sách tất cả Người dùng (Users)
        description: Lấy danh sách tất cả người dùng trong hệ thống có phân trang. Có thể lọc theo vai trò (role), trạng thái (status) và tìm kiếm theo tên hoặc email.
        operationId: adminGetUsers
        security:
          - BearerAuth: []
        parameters:
          - name: page
            in: query
            schema: { type: integer, default: 1 }
            description: Số trang.
          - name: limit
            in: query
            schema: { type: integer, default: 10 }
            description: Số lượng mục trên mỗi trang.
          - name: role
            in: query
            schema: { type: string, enum: [Parent, Admin, Nurse] }
            description: Lọc người dùng theo vai trò.
          - name: status
            in: query
            schema: { type: string, enum: [active, inactive] }
            description: Lọc người dùng theo trạng thái hoạt động.
          - name: search
            in: query
            schema: { type: string }
            description: Từ khóa tìm kiếm cho tên người dùng hoặc email.
        responses:
          '200':
            description: Lấy danh sách người dùng thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserListResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/users/{userId}/status:
      patch:
        tags:
          - Admin - Quản lý Người dùng & Học sinh
        summary: Cập nhật trạng thái Người dùng
        description: Kích hoạt hoặc vô hiệu hóa một tài khoản người dùng.
        operationId: adminUpdateUserStatus
        security:
          - BearerAuth: []
        parameters:
          - name: userId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  isActive:
                    type: boolean
                required:
                  - isActive
        responses:
          '200':
            description: Cập nhật trạng thái người dùng thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserResponse'
          '400':
            description: Dữ liệu không hợp lệ (isActive phải là boolean).
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
          '404':
            description: Không tìm thấy người dùng với ID cung cấp.

  /admin/students:
      get:
        tags:
          - Admin - Quản lý Người dùng & Học sinh
        summary: Lấy danh sách tất cả Học sinh
        description: Lấy danh sách tất cả học sinh có phân trang. Có thể lọc theo lớp và tìm kiếm theo họ tên.
        operationId: adminGetStudents
        security:
          - BearerAuth: []
        parameters:
          - name: page
            in: query
            schema: { type: integer, default: 1 }
            description: Số trang.
          - name: limit
            in: query
            schema: { type: integer, default: 10 }
            description: Số lượng mục trên mỗi trang.
          - name: classId
            in: query
            schema: { type: string }
            description: Lọc học sinh theo ID của lớp.
          - name: search
            in: query
            schema: { type: string }
            description: Từ khóa tìm kiếm theo họ tên học sinh.
        responses:
          '200':
            description: Lấy danh sách học sinh thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StudentListResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
      post:
        tags:
          - Admin - Quản lý Người dùng & Học sinh
        summary: Tạo một Học sinh mới
        description: Tạo một học sinh mới và liên kết với tài khoản phụ huynh và lớp học có sẵn.
        operationId: adminCreateStudent
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStudentRequest'
        responses:
          '201':
            description: Tạo học sinh thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StudentResponse'
          '400':
            description: Thiếu các trường bắt buộc.
          '404':
            description: Không tìm thấy Phụ huynh hoặc Lớp học với ID cung cấp.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/students/{studentId}:
      put:
        tags:
          - Admin - Quản lý Người dùng & Học sinh
        summary: Cập nhật thông tin Học sinh
        description: Cập nhật thông tin chi tiết của một học sinh đã có, bao gồm cả việc chuyển lớp.
        operationId: adminUpdateStudent
        security:
          - BearerAuth: []
        parameters:
          - name: studentId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStudentRequest'
        responses:
          '200':
            description: Cập nhật học sinh thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StudentResponse'
          '400':
            description: Dữ liệu gửi lên rỗng.
          '404':
            description: Không tìm thấy học sinh hoặc lớp học mới.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/classes:
      get:
        tags:
          - Admin - Quản lý Lớp học
        summary: Lấy danh sách Lớp học
        description: Lấy danh sách tất cả các lớp học, có thể lọc theo năm học và khối.
        operationId: adminGetClasses
        security:
          - BearerAuth: []
        parameters:
          - name: page
            in: query
            schema: { type: integer, default: 1 }
          - name: limit
            in: query
            schema: { type: integer, default: 10 }
          - name: schoolYear
            in: query
            schema: { type: string, example: "2024-2025" }
          - name: gradeLevel
            in: query
            schema: { type: integer, example: 1 }
          - name: search
            in: query
            schema: { type: string }
            description: Tìm kiếm theo tên lớp.
        responses:
          '200':
            description: Lấy danh sách lớp học thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClassListResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
      post:
        tags:
          - Admin - Quản lý Lớp học
        summary: Tạo Lớp học mới
        description: Tạo một lớp học mới cho một năm học và khối cụ thể.
        operationId: adminCreateClass
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClassRequest'
        responses:
          '201':
            description: Tạo lớp học thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClassResponse'
          '400':
            description: Thiếu các trường bắt buộc.
          '409':
            description: Lớp học với tên, khối và năm học này đã tồn tại.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/classes/{classId}/add-students:
      patch:
        tags:
          - Admin - Quản lý Lớp học
        summary: Thêm học sinh vào Lớp
        description: Thêm một hoặc nhiều học sinh vào một lớp học đã tồn tại. Sẽ báo lỗi nếu học sinh đã thuộc một lớp khác.
        operationId: adminAddStudentsToClass
        security:
          - BearerAuth: []
        parameters:
          - name: classId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddRemoveStudentsRequest'
        responses:
          '200':
            description: Thêm học sinh thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClassResponse'
          '400':
            description: Mảng studentIds rỗng hoặc không hợp lệ.
          '404':
            description: Không tìm thấy lớp hoặc một trong các học sinh.
          '409':
            description: Một hoặc nhiều học sinh đã thuộc một lớp khác.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/classes/{classId}/remove-students:
      patch:
        tags:
          - Admin - Quản lý Lớp học
        summary: Xóa học sinh khỏi Lớp
        description: Xóa một hoặc nhiều học sinh khỏi một lớp học. Thao tác này sẽ cập nhật classId của học sinh thành null.
        operationId: adminRemoveStudentsFromClass
        security:
          - BearerAuth: []
        parameters:
          - name: classId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddRemoveStudentsRequest'
        responses:
          '200':
            description: Xóa học sinh khỏi lớp thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClassResponse'
          '400':
            description: Mảng studentIds rỗng hoặc không hợp lệ.
          '404':
            description: Không tìm thấy lớp hoặc không có học sinh nào trong danh sách thuộc lớp này.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/health-check-templates:
      get:
        tags:
          - Admin - Quản lý Mẫu Khám
        summary: Lấy danh sách Mẫu Khám
        description: Lấy danh sách tất cả các mẫu khám sức khỏe.
        operationId: adminGetHealthCheckTemplates
        security:
          - BearerAuth: []
        parameters:
          - name: page
            in: query
            schema: { type: integer, default: 1 }
          - name: limit
            in: query
            schema: { type: integer, default: 10 }
          - name: type
            in: query
            schema: { type: string, enum: [GENERAL, DENTAL, VISION] }
          - name: search
            in: query
            schema: { type: string }
        responses:
          '200':
            description: Lấy danh sách mẫu khám thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HealthCheckTemplateListResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
      post:
        tags:
          - Admin - Quản lý Mẫu Khám
        summary: Tạo Mẫu Khám mới
        description: Tạo một mẫu khám mới để có thể tái sử dụng cho các đợt khám sức khỏe.
        operationId: adminCreateHealthCheckTemplate
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHealthCheckTemplateRequest'
        responses:
          '201':
            description: Tạo mẫu khám thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HealthCheckTemplateResponse'
          '400':
            description: Thiếu các trường bắt buộc.
          '409':
            description: Đã tồn tại mẫu khám với tên này.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/health-check-templates/{templateId}:
      get:
        tags:
          - Admin - Quản lý Mẫu Khám
        summary: Lấy Mẫu Khám theo ID
        description: Lấy thông tin chi tiết của một mẫu khám sức khỏe.
        operationId: adminGetHealthCheckTemplateById
        security:
          - BearerAuth: []
        parameters:
          - name: templateId
            in: path
            required: true
            schema: { type: string }
        responses:
          '200':
            description: Lấy thông tin mẫu khám thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HealthCheckTemplateResponse'
          '404':
            description: Không tìm thấy mẫu khám.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
      put:
        tags:
          - Admin - Quản lý Mẫu Khám
        summary: Cập nhật Mẫu Khám
        description: Cập nhật thông tin một mẫu khám đã có.
        operationId: adminUpdateHealthCheckTemplate
        security:
          - BearerAuth: []
        parameters:
          - name: templateId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHealthCheckTemplateRequest'
        responses:
          '200':
            description: Cập nhật mẫu khám thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HealthCheckTemplateResponse'
          '400':
            description: Dữ liệu gửi lên rỗng.
          '404':
            description: Không tìm thấy mẫu khám để cập nhật.
          '409':
            description: Tên mẫu khám mới đã bị trùng.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
      delete:
        tags:
          - Admin - Quản lý Mẫu Khám
        summary: Xóa Mẫu Khám
        description: Xóa một mẫu khám. Sẽ không thể xóa nếu mẫu đang được sử dụng bởi một đợt khám nào đó.
        operationId: adminDeleteHealthCheckTemplate
        security:
          - BearerAuth: []
        parameters:
          - name: templateId
            in: path
            required: true
            schema: { type: string }
        responses:
          '200':
            description: Xóa mẫu khám thành công.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message: { type: string }
          '404':
            description: Không tìm thấy mẫu khám để xóa.
          '409':
            description: Không thể xóa vì mẫu đang được sử dụng bởi một đợt khám.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/vaccines/suggestions:
      get:
        tags:
          - Admin - Tiện ích
        summary: Lấy gợi ý tên Vaccine
        description: Cung cấp danh sách các tên vaccine duy nhất từ tất cả các nguồn dữ liệu trong hệ thống để phục vụ cho chức năng autocomplete.
        operationId: getVaccineSuggestions
        security:
          - BearerAuth: []
        responses:
          '200':
            description: Lấy danh sách gợi ý thành công.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    data:
                      type: array
                      items:
                        type: string
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/partners:
      get:
        tags:
          - Admin - Quản lý Đối tác
        summary: Lấy danh sách Đối tác
        description: Lấy danh sách tất cả các đối tác y tế.
        operationId: adminGetPartners
        security:
          - BearerAuth: []
        parameters:
          - name: page
            in: query
            schema: { type: integer, default: 1 }
          - name: limit
            in: query
            schema: { type: integer, default: 10 }
          - name: status
            in: query
            schema: { type: string, enum: [active, inactive] }
          - name: search
            in: query
            schema: { type: string }
        responses:
          '200':
            description: Lấy danh sách đối tác thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnerListResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
      post:
        tags:
          - Admin - Quản lý Đối tác
        summary: Tạo Đối tác mới
        description: Thêm một tổ chức y tế mới làm đối tác và thông tin người quản lý của họ.
        operationId: adminCreatePartner
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePartnerRequest'
        responses:
          '201':
            description: Tạo đối tác thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnerResponse'
          '400':
            description: Thiếu object `organization` hoặc `managerInfo`.
          '409':
            description: Tên hoặc email của đối tác đã tồn tại.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}:
      get:
        tags:
          - Admin - Quản lý Đối tác
        summary: Lấy Đối tác theo ID
        description: Lấy thông tin chi tiết của một đối tác cụ thể.
        operationId: adminGetPartnerById
        security:
          - BearerAuth: []
        parameters:
          - name: partnerId
            in: path
            required: true
            schema: { type: string }
        responses:
          '200':
            description: Lấy thông tin đối tác thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnerResponse'
          '404':
            description: Không tìm thấy đối tác.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
      patch:
        tags:
          - Admin - Quản lý Đối tác
        summary: Cập nhật thông tin Đối tác
        description: Cập nhật một phần thông tin của đối tác (không bao gồm người quản lý và nhân viên).
        operationId: adminUpdatePartner
        security:
          - BearerAuth: []
        parameters:
          - name: partnerId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePartnerRequest'
        responses:
          '200':
            description: Cập nhật đối tác thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnerResponse'
          '400':
            description: Dữ liệu gửi lên rỗng.
          '404':
            description: Không tìm thấy đối tác.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/status:
      patch:
        tags:
          - Admin - Quản lý Đối tác
        summary: Cập nhật trạng thái Đối tác
        description: Kích hoạt hoặc vô hiệu hóa một đối tác. Thao tác này cũng sẽ cập nhật trạng thái cho tất cả nhân viên của đối tác đó.
        operationId: adminUpdatePartnerStatus
        security:
          - BearerAuth: []
        parameters:
          - name: partnerId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  isActive: { type: boolean }
                required: [isActive]
        responses:
          '200':
            description: Cập nhật trạng thái đối tác thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnerResponse'
          '400':
            description: Thiếu trường `isActive` hoặc không phải boolean.
          '404':
            description: Không tìm thấy đối tác.
          '409':
            description: Đối tác đã ở trạng thái được yêu cầu.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/staff:
      post:
        tags:
          - Admin - Quản lý Đối tác
        summary: Thêm Nhân viên cho Đối tác
        description: Thêm một nhân viên mới vào một tổ chức đối tác.
        operationId: adminAddStaffToPartner
        security:
          - BearerAuth: []
        parameters:
          - name: partnerId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePartnerStaffRequest'
        responses:
          '201':
            description: Thêm nhân viên thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnerStaffResponse'
          '404':
            description: Không tìm thấy đối tác.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/staff/{staffId}:
      delete:
        tags:
          - Admin - Quản lý Đối tác
        summary: Xóa Nhân viên của Đối tác
        description: Xóa một nhân viên khỏi một tổ chức đối tác. Sẽ không thể xóa nếu nhân viên này có liên quan đến các hồ sơ tiêm chủng.
        operationId: adminRemoveStaffFromPartner
        security:
          - BearerAuth: []
        parameters:
          - name: partnerId
            in: path
            required: true
            schema: { type: string }
          - name: staffId
            in: path
            required: true
            schema: { type: string }
        responses:
          '200':
            description: Xóa nhân viên thành công.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message: { type: string }
          '404':
            description: Không tìm thấy đối tác hoặc nhân viên trong đối tác đó.
          '409':
            description: Không thể xóa vì nhân viên đã có liên kết với hồ sơ tiêm chủng.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/manager:
      put:
        tags:
          - Admin - Quản lý Đối tác
        summary: Thay thế Người quản lý của Đối tác
        description: Thay thế thông tin người quản lý của một đối tác. Người quản lý cũ sẽ bị xóa.
        operationId: adminReplacePartnerManager
        security:
          - BearerAuth: []
        parameters:
          - name: partnerId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateManagerInfoRequest'
        responses:
          '200':
            description: Thay thế người quản lý thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ManagerInfoResponse'
          '404':
            description: Không tìm thấy đối tác.
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/inventory:
      get:
        tags:
          - Admin - Quản lý Kho
        summary: Xem danh sách Kho vật tư
        description: Lấy danh sách tất cả các vật tư y tế trong kho.
        operationId: adminGetInventory
        security:
          - BearerAuth: []
        parameters:
          - name: page
            in: query
            schema: { type: integer, default: 1 }
          - name: limit
            in: query
            schema: { type: integer, default: 10 }
          - name: status
            in: query
            schema: { type: string, enum: [IN_STOCK, LOW_STOCK, OUT_OF_STOCK] }
          - name: search
            in: query
            schema: { type: string }
        responses:
          '200':
            description: Lấy danh sách kho thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdminInventoryListResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the user
        username:
          type: string
          description: Username for authentication
        email:
          type: string
          description: User's email address
        role:
          type: string
          enum: [Parent, Admin, Teacher]
          description: User's role
        dob:
          type: string
          format: date
          description: Date of birth for local authentication
        phone:
          type: string
          description: Phone number for local authentication
        isActive:
          type: boolean
          description: Indicates if the user account is active
        googleId:
          type: string
          nullable: true
          description: Google ID for users authenticated via Google
        authProvider:
          type: string
          enum: [local, google]
          description: Authentication provider used
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
      required:
        - _id
        - username
        - email
        - role
        - dob
        - phone
        - isActive
        - authProvider
        - googleId
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - username
        - password
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        email:
          type: string
        dob:
          type: string
          format: date
        phone:
          type: string
      required:
        - username
        - password
        - email
        - dob
        - phone
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: true
        message:
          type: string
          description: Success message
        data:
          type: object
          description: Additional data returned by the operation
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: false
        message:
          type: string
          description: Error message
    AdminDashboardResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/AdminDashboardData'
    UserListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    UserResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/User'
    StudentListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            students:
              type: array
              items:
                $ref: '#/components/schemas/StudentDetail'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    StudentResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/Student'
    ClassListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            classes:
              type: array
              items:
                $ref: '#/components/schemas/Class'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    ClassResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/Class'
    HealthCheckTemplateListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            templates:
              type: array
              items:
                $ref: '#/components/schemas/HealthCheckTemplate'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    HealthCheckTemplateResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/HealthCheckTemplate'
    PartnerListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            partners:
              type: array
              items:
                $ref: '#/components/schemas/HealthcareOrganization'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    PartnerResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/HealthcareOrganization'
    PartnerStaffResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/PartnerStaff'
    ManagerInfoResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/ManagerInfo'
    AdminInventoryListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/AdminInventoryItem'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }

    # Schemas cho Models và DTOs
    AdminDashboardData:
      type: object
      properties:
        quickStats:
          $ref: '#/components/schemas/QuickStats'
        healthAnalytics:
          $ref: '#/components/schemas/HealthAnalytics'
        operationalMonitoring:
          $ref: '#/components/schemas/OperationalMonitoring'
    QuickStats:
      type: object
      properties:
        totalStudents: { type: integer }
        incidentsThisWeek: { type: integer }
        pendingMedicationRequests: { type: integer }
        inventoryAlerts: { type: integer }
    HealthAnalytics:
      type: object
      properties:
        healthClassification:
          type: array
          items:
            type: object
            properties:
              classification: { type: string }
              count: { type: integer }
        commonIssues:
          type: array
          items:
            type: object
            properties:
              issue: { type: string }
              studentCount: { type: integer }
        bmiTrend:
          type: array
          items:
            type: object
            properties:
              schoolYear: { type: string }
              averageBmi: { type: number }
    OperationalMonitoring:
      type: object
      properties:
        latestCampaignStatus:
          type: object
          properties:
            name: { type: string }
            total: { type: integer }
            approved: { type: integer }
            declined: { type: integer }
        recentIncidents:
          type: array
          items:
            type: object
            properties:
              _id: { type: string }
              incidentType: { type: string }
              incidentTime: { type: string, format: 'date-time' }
              studentId:
                type: object
                properties:
                  _id: { type: string }
                  fullName: { type: string }
    Student:
      type: object
      properties:
        _id: { type: string }
        parentId: { type: string }
        classId: { type: string }
        fullName: { type: string }
        dateOfBirth: { type: string, format: date }
    StudentDetail:
      type: object
      description: Thông tin chi tiết của học sinh, bao gồm cả thông tin lớp và phụ huynh.
      properties:
        _id: { type: string }
        fullName: { type: string }
        dateOfBirth: { type: string, format: date }
        createdAt: { type: string, format: 'date-time' }
        parent:
          type: object
          properties:
            _id: { type: string }
            username: { type: string }
            email: { type: string }
        class:
          type: object
          properties:
            _id: { type: string }
            className: { type: string }
    CreateStudentRequest:
      type: object
      properties:
        parentId: { type: string }
        classId: { type: string }
        fullName: { type: string }
        dateOfBirth: { type: string, format: date }
      required: [parentId, classId, fullName, dateOfBirth]
    UpdateStudentRequest:
      type: object
      properties:
        classId: { type: string }
        fullName: { type: string }
        dateOfBirth: { type: string, format: date }
    AddRemoveStudentsRequest:
      type: object
      properties:
        studentIds:
          type: array
          items:
            type: string
      required: [studentIds]
    Class:
      type: object
      properties:
        _id: { type: string }
        className: { type: string }
        gradeLevel: { type: integer }
        schoolYear: { type: string }
        totalStudents: { type: integer }
        students:
          type: array
          items:
            type: string # Trả về array of IDs
    CreateClassRequest:
      type: object
      properties:
        className: { type: string }
        gradeLevel: { type: integer }
        schoolYear: { type: string }
      required: [className, gradeLevel, schoolYear]
    HealthCheckTemplate:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        description: { type: string }
        type: { type: string, enum: [GENERAL, DENTAL, VISION] }
        checkupItems:
          type: array
          items:
            $ref: '#/components/schemas/CheckupItem'
        isDefault: { type: boolean }
    CheckupItem:
      type: object
      properties:
        itemName: { type: string }
        unit: { type: string }
        dataType: { type: string, enum: [NUMBER, TEXT, BOOLEAN, SELECT] }
        guideline: { type: string }
        options: { type: array, items: { type: string } }
    CreateHealthCheckTemplateRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        type: { type: string, enum: [GENERAL, DENTAL, VISION] }
        checkupItems:
          type: array
          items:
            $ref: '#/components/schemas/CheckupItem'
        isDefault: { type: boolean, default: false }
      required: [name, description, type, checkupItems]
    HealthcareOrganization:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        address: { type: string }
        phone: { type: string }
        email: { type: string }
        type: { type: string, enum: [HOSPITAL, CLINIC, HEALTH_CENTER] }
        isActive: { type: boolean }
        managerInfo: { $ref: '#/components/schemas/ManagerInfo' }
        staffMembers:
          type: array
          items: { $ref: '#/components/schemas/PartnerStaff' }
    ManagerInfo:
      type: object
      properties:
        _id: { type: string }
        fullName: { type: string }
        email: { type: string }
        phone: { type: string }
    PartnerStaff:
      type: object
      properties:
        _id: { type: string }
        fullName: { type: string }
        position: { type: string }
        isActive: { type: boolean }
    CreatePartnerRequest:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/UpdatePartnerRequest'
        managerInfo:
          $ref: '#/components/schemas/CreateManagerInfoRequest'
      required: [organization, managerInfo]
    UpdatePartnerRequest:
      type: object
      properties:
        name: { type: string }
        address: { type: string }
        phone: { type: string }
        email: { type: string }
        type: { type: string, enum: [HOSPITAL, CLINIC, HEALTH_CENTER] }
    CreateManagerInfoRequest:
      type: object
      properties:
        fullName: { type: string }
        email: { type: string }
        phone: { type: string }
      required: [fullName, email, phone]
    CreatePartnerStaffRequest:
      type: object
      properties:
        fullName: { type: string }
        position: { type: string }
      required: [fullName]
    AdminInventoryItem:
      type: object
      description: Dữ liệu một vật tư trong kho dành cho Admin, bao gồm cả ngày hết hạn.
      properties:
        _id: { type: string }
        itemName: { type: string }
        unit: { type: string }
        quantityTotal: { type: number }
        lowStockThreshold: { type: number }
        status: { type: string }
        expirationDate: { type: string, format: date }
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Token truy cập thiếu hoặc không hợp lệ.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Người dùng không có quyền truy cập vào tài nguyên này.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
