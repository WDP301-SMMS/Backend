openapi: 3.0.0
info:
  title: School Medical Management System API
  version: 1.0.0
  description: API documentation for School Medical Management System
servers:
  - url: __BASE_URL__
paths:
  /auth/google:
    get:
      tags:
        - Authentication
      summary: Redirect to Google OAuth
      description: Redirects the user to Google's OAuth consent screen
      operationId: redirectToGoogleOAuth
      responses:
        '302':
          description: Redirects to Google OAuth URL
  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Handle Google OAuth callback
      description: Processes the Google OAuth callback and returns user information
      operationId: handleGoogleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful authentication with Google
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRequest'
  /auth/login:
    post:
      summary: Login with JWT
      tags:
        - Authentication
      description: Authenticates a user with username and password, returns JWT tokens
      operationId: loginWithJwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=abc123; HttpOnly; SameSite=Strict; Expires=...
              description: Sets refreshToken cookie
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      description: Registers a new user with local authentication
      operationId: registerWithJwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
  /auth/refresh-token:
    post:
      summary: Refresh JWT token
      tags:
        - Authentication
      description: Generates a new access token using a refresh token
      operationId: refreshToken
      responses:
        '200':
          description: Successful token refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /auth/forgot-password:
    post:
      summary: Forgot password
      tags:
        - Authentication
      description: Sends an OTP to the user's email for password reset
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
              required:
                - email
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OTP sent to your email successfully
  /auth/verify-otp:
    post:
      summary: Verify OTP
      tags:
        - Authentication
      description: Verifies the OTP sent to the user's email
      operationId: verifyOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                token:
                  type: string
                  example: '123456'
              required:
                - email
                - token
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OTP verified successfully
                  data:
                    type: object
                    properties:
                      resetToken:
                        type: string
                        example: 'a1b2c3d4e5'
  /auth/reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      description: Resets the user's password using the reset token
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                resetToken:
                  type: string
                  example: 'a1b2c3d4e5'
                newPassword:
                  type: string
                  format: password
                  example: 'NewPassword123!'
                confirmNewPassword:
                  type: string
                  format: password
                  example: 'NewPassword123!'
              required:
                - email
                - resetToken
                - newPassword
                - confirmNewPassword
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset successfully
  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      description: Logs out the user by clearing the refresh token cookie
      operationId: logoutUser
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged out successfully
  /user/me:
    get:
      tags:
        - User Controller
      summary: Get user profile
      description: Retrieves a user's profile information
      operationId: getUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    $ref: '#/components/schemas/User'
    put:
      tags:
        - User Controller
      summary: Update user profile
      description: Updates the profile information of a user
      operationId: editProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'johndoe'
                dob:
                  type: string
                  example: '31/12/1990'
                  description: Date of birth in DD/MM/YYYY format
                phone:
                  type: string
                  example: '+1234567890'
                gender:
                  type: string
                  enum: ['Male', 'Female']
              required:
                - username
                - dob
                - phone
                - gender
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User profile updated successfully
                  data:
                    $ref: '#/components/schemas/User'
  /user/me/change-password:
    patch:
      tags:
        - User Controller
      summary: Change user password
      description: Updates the password of a user
      operationId: updatePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: User's current password
                newPassword:
                  type: string
                  format: password
                  description: New password (minimum 6 characters)
                confirmNewPassword:
                  type: string
                  format: password
                  description: Confirmation of the new password
              required:
                - currentPassword
                - newPassword
                - confirmNewPassword
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password updated successfully
  /user/complete-profile:
    put:
      tags:
        - User Controller
      summary: Complete user profile
      description: Updates user's profile with phone, password and date of birth
      operationId: completeProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  description: New password (minimum 6 characters)
                dob:
                  type: string
                  format: date
                  description: Date of birth in DD/MM/YYYY format (must be over 18)
                  example: "31/12/2000"
                phone:
                  type: string
                  description: Valid phone number
                  example: "0987654321"
              required:
                - password
                - dob
                - phone
      responses:
        '200':
          description: Profile completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Profile completed successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: Date of Birth must be a valid date in DD/MM/YYYY format
                        path:
                          type: string
                          example: dob
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /admin/dashboard:
      get:
        tags:
          - Admin - Dashboard
        summary: Lấy dữ liệu tổng quan cho Dashboard của Admin
        description: Trả về các số liệu thống kê chính cho trang dashboard của quản trị viên, chẳng hạn như số lượng người dùng, học sinh, lớp học và các hoạt động gần đây.
        operationId: getAdminDashboard
        security:
          - BearerAuth: []
        responses:
          '200':
            description: Lấy dữ liệu dashboard thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdminDashboardResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/users:
      get:
        tags:
          - Admin - Quản lý Người dùng & Học sinh
        summary: Lấy danh sách tất cả Người dùng (Users)
        description: Lấy danh sách tất cả người dùng trong hệ thống có phân trang. Có thể lọc theo vai trò (role), trạng thái (status) và tìm kiếm theo tên hoặc email.
        operationId: adminGetUsers
        security:
          - BearerAuth: []
        parameters:
          - name: page
            in: query
            schema: { type: integer, default: 1 }
            description: Số trang.
          - name: limit
            in: query
            schema: { type: integer, default: 10 }
            description: Số lượng mục trên mỗi trang.
          - name: role
            in: query
            schema: { type: string, enum: [Parent, Admin, Nurse] }
            description: Lọc người dùng theo vai trò.
          - name: status
            in: query
            schema: { type: string, enum: [active, inactive] }
            description: Lọc người dùng theo trạng thái hoạt động.
          - name: search
            in: query
            schema: { type: string }
            description: Từ khóa tìm kiếm cho tên người dùng hoặc email.
        responses:
          '200':
            description: Lấy danh sách người dùng thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserListResponse'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'

  /admin/users/{userId}/status:
      patch:
        tags:
          - Admin - Quản lý Người dùng & Học sinh
        summary: Cập nhật trạng thái Người dùng
        description: Kích hoạt hoặc vô hiệu hóa một tài khoản người dùng.
        operationId: adminUpdateUserStatus
        security:
          - BearerAuth: []
        parameters:
          - name: userId
            in: path
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  isActive:
                    type: boolean
                required:
                  - isActive
        responses:
          '200':
            description: Cập nhật trạng thái người dùng thành công.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserResponse'
          '400':
            description: Dữ liệu không hợp lệ (isActive phải là boolean).
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '403':
            $ref: '#/components/responses/ForbiddenError'
          '404':
            description: Không tìm thấy người dùng với ID cung cấp.
            
  /health-check/templates:
    get:
      tags:
        - Health Check Templates
      summary: Get all health check templates
      description: Retrieves all available health check templates
      operationId: getAllHealthCheckTemplates
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Health check templates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthCheckTemplate'
        '404':
          description: No templates found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Health Check Templates
      summary: Create a new health check template
      description: Creates a new health check template with specified checkup items
      operationId: createHealthCheckTemplate
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHealthCheckTemplateRequest'
      responses:
        '200':
          description: Health check template created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/HealthCheckTemplate'
        '400':
          description: Failed to create health check template or template with this name already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /health-check/templates/{id}:
    get:
      tags:
        - Health Check Templates
      summary: Get a specific health check template
      description: Retrieves a specific health check template by ID
      operationId: getHealthCheckTemplate
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Health check template retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/HealthCheckTemplate'
        '404':
          description: Template not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      tags:
        - Health Check Templates
      summary: Update a health check template
      description: Updates an existing health check template
      operationId: updateHealthCheckTemplate
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHealthCheckTemplateRequest'
      responses:
        '200':
          description: Health check template updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/HealthCheckTemplate'
        '400':
          description: Invalid input data
        '404':
          description: Template not found
        '409':
          description: Template name already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      tags:
        - Health Check Templates
      summary: Delete a health check template
      description: Deletes an existing health check template. Cannot delete default templates.
      operationId: deleteHealthCheckTemplate
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Health check template deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Cannot delete the default Health Check Template
        '404':
          description: Template not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /health-check/templates/set-default:
    post:
      tags:
        - Health Check Templates
      summary: Set a template as default
      description: Sets a specific health check template as the default, unsets all others
      operationId: setDefaultForHealthCheckTemplate
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
              required:
                - id
      responses:
        '200':
          description: Health check template set as default successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/HealthCheckTemplate'
        '400':
          description: Template is already set as default
        '404':
          description: Template not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/dashboard:
    get:
      tags:
        - Admin - Dashboard
      summary: Lấy dữ liệu tổng quan cho Dashboard của Admin
      description: Trả về các số liệu thống kê chính cho trang dashboard của quản trị viên, chẳng hạn như số lượng người dùng, học sinh, lớp học và các hoạt động gần đây.
      operationId: getAdminDashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lấy dữ liệu dashboard thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDashboardResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/users:
    get:
      tags:
        - Admin - Quản lý Người dùng & Học sinh
      summary: Lấy danh sách tất cả Người dùng (Users)
      description: Lấy danh sách tất cả người dùng trong hệ thống có phân trang. Có thể lọc theo vai trò (role), trạng thái (status) và tìm kiếm theo tên hoặc email.
      operationId: adminGetUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
          description: Số trang.
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
          description: Số lượng mục trên mỗi trang.
        - name: role
          in: query
          schema: { type: string, enum: [Parent, Admin, Nurse] }
          description: Lọc người dùng theo vai trò.
        - name: status
          in: query
          schema: { type: string, enum: [active, inactive] }
          description: Lọc người dùng theo trạng thái hoạt động.
        - name: search
          in: query
          schema: { type: string }
          description: Từ khóa tìm kiếm cho tên người dùng hoặc email.
      responses:
        '200':
          description: Lấy danh sách người dùng thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/users/{userId}/status:
    patch:
      tags:
        - Admin - Quản lý Người dùng & Học sinh
      summary: Cập nhật trạng thái Người dùng
      description: Kích hoạt hoặc vô hiệu hóa một tài khoản người dùng.
      operationId: adminUpdateUserStatus
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: User registered successfully
                isActive:
                  type: boolean
              required:
                - isActive
      responses:
        '200':
          description: Cập nhật trạng thái người dùng thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Dữ liệu không hợp lệ (isActive phải là boolean).
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Không tìm thấy người dùng với ID cung cấp.

  /admin/students:
    get:
      tags:
        - Admin - Quản lý Người dùng & Học sinh
      summary: Lấy danh sách tất cả Học sinh
      description: Lấy danh sách tất cả học sinh có phân trang. Có thể lọc theo lớp và tìm kiếm theo họ tên.
      operationId: adminGetStudents
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
          description: Số trang.
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
          description: Số lượng mục trên mỗi trang.
        - name: classId
          in: query
          schema: { type: string }
          description: Lọc học sinh theo ID của lớp.
        - name: search
          in: query
          schema: { type: string }
          description: Từ khóa tìm kiếm theo họ tên học sinh.
      responses:
        '200':
          description: Lấy danh sách học sinh thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Admin - Quản lý Người dùng & Học sinh
      summary: Tạo một Học sinh mới
      description: Tạo một học sinh mới và liên kết với tài khoản phụ huynh và lớp học có sẵn.
      operationId: adminCreateStudent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: Tạo học sinh thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Thiếu các trường bắt buộc.
        '404':
          description: Không tìm thấy Phụ huynh hoặc Lớp học với ID cung cấp.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/students/{studentId}:
    put:
      tags:
        - Admin - Quản lý Người dùng & Học sinh
      summary: Cập nhật thông tin Học sinh
      description: Cập nhật thông tin chi tiết của một học sinh đã có, bao gồm cả việc chuyển lớp.
      operationId: adminUpdateStudent
      security:
        - BearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
      responses:
        '200':
          description: Cập nhật học sinh thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentResponse'
        '400':
          description: Dữ liệu gửi lên rỗng.
        '404':
          description: Không tìm thấy học sinh hoặc lớp học mới.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/classes:
    get:
      tags:
        - Admin - Quản lý Lớp học
      summary: Lấy danh sách Lớp học
      description: Lấy danh sách tất cả các lớp học, có thể lọc theo năm học và khối.
      operationId: adminGetClasses
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
        - name: schoolYear
          in: query
          schema: { type: string, example: '2024-2025' }
        - name: gradeLevel
          in: query
          schema: { type: integer, example: 1 }
        - name: search
          in: query
          schema: { type: string }
          description: Tìm kiếm theo tên lớp.
      responses:
        '200':
          description: Lấy danh sách lớp học thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Admin - Quản lý Lớp học
      summary: Tạo Lớp học mới
      description: Tạo một lớp học mới cho một năm học và khối cụ thể.
      operationId: adminCreateClass
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClassRequest'
      responses:
        '201':
          description: Tạo lớp học thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponse'
        '400':
          description: Thiếu các trường bắt buộc.
        '409':
          description: Lớp học với tên, khối và năm học này đã tồn tại.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/classes/{classId}/add-students:
    patch:
      tags:
        - Admin - Quản lý Lớp học
      summary: Thêm học sinh vào Lớp
      description: Thêm một hoặc nhiều học sinh vào một lớp học đã tồn tại. Sẽ báo lỗi nếu học sinh đã thuộc một lớp khác.
      operationId: adminAddStudentsToClass
      security:
        - BearerAuth: []
      parameters:
        - name: classId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRemoveStudentsRequest'
      responses:
        '200':
          description: Thêm học sinh thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponse'
        '400':
          description: Mảng studentIds rỗng hoặc không hợp lệ.
        '404':
          description: Không tìm thấy lớp hoặc một trong các học sinh.
        '409':
          description: Một hoặc nhiều học sinh đã thuộc một lớp khác.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/classes/{classId}/remove-students:
    patch:
      tags:
        - Admin - Quản lý Lớp học
      summary: Xóa học sinh khỏi Lớp
      description: Xóa một hoặc nhiều học sinh khỏi một lớp học. Thao tác này sẽ cập nhật classId của học sinh thành null.
      operationId: adminRemoveStudentsFromClass
      security:
        - BearerAuth: []
      parameters:
        - name: classId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRemoveStudentsRequest'
      responses:
        '200':
          description: Xóa học sinh khỏi lớp thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassResponse'
        '400':
          description: Mảng studentIds rỗng hoặc không hợp lệ.
        '404':
          description: Không tìm thấy lớp hoặc không có học sinh nào trong danh sách thuộc lớp này.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/health-check-templates:
    get:
      tags:
        - Admin - Quản lý Mẫu Khám
      summary: Lấy danh sách Mẫu Khám
      description: Lấy danh sách tất cả các mẫu khám sức khỏe.
      operationId: adminGetHealthCheckTemplates
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Lấy danh sách mẫu khám thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckTemplateListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Admin - Quản lý Mẫu Khám
      summary: Tạo Mẫu Khám mới
      description: Tạo một mẫu khám mới để có thể tái sử dụng cho các đợt khám sức khỏe.
      operationId: adminCreateHealthCheckTemplate
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHealthCheckTemplateRequest'
      responses:
        '201':
          description: Tạo mẫu khám thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckTemplateResponse'
        '400':
          description: Thiếu các trường bắt buộc.
        '409':
          description: Đã tồn tại mẫu khám với tên này.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/health-check-templates/{templateId}:
    get:
      tags:
        - Admin - Quản lý Mẫu Khám
      summary: Lấy Mẫu Khám theo ID
      description: Lấy thông tin chi tiết của một mẫu khám sức khỏe.
      operationId: adminGetHealthCheckTemplateById
      security:
        - BearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Lấy thông tin mẫu khám thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckTemplateResponse'
        '404':
          description: Không tìm thấy mẫu khám.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      tags:
        - Admin - Quản lý Mẫu Khám
      summary: Cập nhật Mẫu Khám
      description: Cập nhật thông tin một mẫu khám đã có.
      operationId: adminUpdateHealthCheckTemplate
      security:
        - BearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHealthCheckTemplateRequest'
      responses:
        '200':
          description: Cập nhật mẫu khám thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckTemplateResponse'
        '400':
          description: Dữ liệu gửi lên rỗng.
        '404':
          description: Không tìm thấy mẫu khám để cập nhật.
        '409':
          description: Tên mẫu khám mới đã bị trùng.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      tags:
        - Admin - Quản lý Mẫu Khám
      summary: Xóa Mẫu Khám
      description: Xóa một mẫu khám. Sẽ không thể xóa nếu mẫu đang được sử dụng bởi một đợt khám nào đó.
      operationId: adminDeleteHealthCheckTemplate
      security:
        - BearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Xóa mẫu khám thành công.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '404':
          description: Không tìm thấy mẫu khám để xóa.
        '409':
          description: Không thể xóa vì mẫu đang được sử dụng bởi một đợt khám.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/vaccines/suggestions:
    get:
      tags:
        - Admin - Tiện ích
      summary: Lấy gợi ý tên Vaccine
      description: Cung cấp danh sách các tên vaccine duy nhất từ tất cả các nguồn dữ liệu trong hệ thống để phục vụ cho chức năng autocomplete.
      operationId: getVaccineSuggestions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lấy danh sách gợi ý thành công.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/partners:
    get:
      tags:
        - Admin - Quản lý Đối tác
      summary: Lấy danh sách Đối tác
      description: Lấy danh sách tất cả các đối tác y tế.
      operationId: adminGetPartners
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
        - name: status
          in: query
          schema: { type: string, enum: [active, inactive] }
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Lấy danh sách đối tác thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Admin - Quản lý Đối tác
      summary: Tạo Đối tác mới
      description: Thêm một tổ chức y tế mới làm đối tác và thông tin người quản lý của họ.
      operationId: adminCreatePartner
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePartnerRequest'
      responses:
        '201':
          description: Tạo đối tác thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerResponse'
        '400':
          description: Thiếu object `organization` hoặc `managerInfo`.
        '409':
          description: Tên hoặc email của đối tác đã tồn tại.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}:
    get:
      tags:
        - Admin - Quản lý Đối tác
      summary: Lấy Đối tác theo ID
      description: Lấy thông tin chi tiết của một đối tác cụ thể.
      operationId: adminGetPartnerById
      security:
        - BearerAuth: []
      parameters:
        - name: partnerId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Lấy thông tin đối tác thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerResponse'
        '404':
          description: Không tìm thấy đối tác.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    patch:
      tags:
        - Admin - Quản lý Đối tác
      summary: Cập nhật thông tin Đối tác
      description: Cập nhật một phần thông tin của đối tác (không bao gồm người quản lý và nhân viên).
      operationId: adminUpdatePartner
      security:
        - BearerAuth: []
      parameters:
        - name: partnerId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePartnerRequest'
      responses:
        '200':
          description: Cập nhật đối tác thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerResponse'
        '400':
          description: Dữ liệu gửi lên rỗng.
        '404':
          description: Không tìm thấy đối tác.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/status:
    patch:
      tags:
        - Admin - Quản lý Đối tác
      summary: Cập nhật trạng thái Đối tác
      description: Kích hoạt hoặc vô hiệu hóa một đối tác. Thao tác này cũng sẽ cập nhật trạng thái cho tất cả nhân viên của đối tác đó.
      operationId: adminUpdatePartnerStatus
      security:
        - BearerAuth: []
      parameters:
        - name: partnerId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive: { type: boolean }
              required: [isActive]
      responses:
        '200':
          description: Cập nhật trạng thái đối tác thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerResponse'
        '400':
          description: Thiếu trường `isActive` hoặc không phải boolean.
        '404':
          description: Không tìm thấy đối tác.
        '409':
          description: Đối tác đã ở trạng thái được yêu cầu.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/staff:
    post:
      tags:
        - Admin - Quản lý Đối tác
      summary: Thêm Nhân viên cho Đối tác
      description: Thêm một nhân viên mới vào một tổ chức đối tác.
      operationId: adminAddStaffToPartner
      security:
        - BearerAuth: []
      parameters:
        - name: partnerId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePartnerStaffRequest'
      responses:
        '201':
          description: Thêm nhân viên thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerStaffResponse'
        '404':
          description: Không tìm thấy đối tác.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/staff/{staffId}:
    delete:
      tags:
        - Admin - Quản lý Đối tác
      summary: Xóa Nhân viên của Đối tác
      description: Xóa một nhân viên khỏi một tổ chức đối tác. Sẽ không thể xóa nếu nhân viên này có liên quan đến các hồ sơ tiêm chủng.
      operationId: adminRemoveStaffFromPartner
      security:
        - BearerAuth: []
      parameters:
        - name: partnerId
          in: path
          required: true
          schema: { type: string }
        - name: staffId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Xóa nhân viên thành công.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '404':
          description: Không tìm thấy đối tác hoặc nhân viên trong đối tác đó.
        '409':
          description: Không thể xóa vì nhân viên đã có liên kết với hồ sơ tiêm chủng.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/partners/{partnerId}/manager:
    put:
      tags:
        - Admin - Quản lý Đối tác
      summary: Thay thế Người quản lý của Đối tác
      description: Thay thế thông tin người quản lý của một đối tác. Người quản lý cũ sẽ bị xóa.
      operationId: adminReplacePartnerManager
      security:
        - BearerAuth: []
      parameters:
        - name: partnerId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateManagerInfoRequest'
      responses:
        '200':
          description: Thay thế người quản lý thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerInfoResponse'
        '404':
          description: Không tìm thấy đối tác.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/inventory:
    get:
      tags:
        - Admin - Quản lý Kho
      summary: Xem danh sách Kho vật tư
      description: Lấy danh sách tất cả các vật tư y tế trong kho.
      operationId: adminGetInventory
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, default: 10 }
        - name: status
          in: query
          schema: { type: string, enum: [IN_STOCK, LOW_STOCK, OUT_OF_STOCK] }
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Lấy danh sách kho thành công.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInventoryListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /health-check/campaigns:
    get:
      tags:
        - Health Check Campaigns
      summary: Get all health check campaigns with advanced filtering
      description: Retrieves all health check campaigns with comprehensive filtering, sorting, and pagination options
      operationId: getAllHealthCheckCampaigns
      security:
        - BearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term for campaign name or school year
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: status
          in: query
          description: Filter by campaign status (single or multiple)
          required: false
          schema:
            oneOf:
              - type: string
                enum: [DRAFT, ANNOUNCED, IN_PROGRESS, COMPLETED, CANCELED]
              - type: array
                items:
                  type: string
                  enum: [DRAFT, ANNOUNCED, IN_PROGRESS, COMPLETED, CANCELED]
        - name: schoolYear
          in: query
          description: Filter by school year (single or multiple)
          required: false
          schema:
            oneOf:
              - type: string
                pattern: '^\d{4}-\d{4}$'
              - type: array
                items:
                  type: string
                  pattern: '^\d{4}-\d{4}$'
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [name, startDate, endDate, createdAt, status, schoolYear, completedDate, actualStartDate]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: startDateFrom
          in: query
          description: Filter campaigns starting from this date
          required: false
          schema:
            type: string
            format: date-time
        - name: startDateTo
          in: query
          description: Filter campaigns starting before this date
          required: false
          schema:
            type: string
            format: date-time
        - name: endDateFrom
          in: query
          description: Filter campaigns ending from this date
          required: false
          schema:
            type: string
            format: date-time
        - name: endDateTo
          in: query
          description: Filter campaigns ending before this date
          required: false
          schema:
            type: string
            format: date-time
        - name: createdBy
          in: query
          description: Filter by creator user ID(s)
          required: false
          schema:
            oneOf:
              - type: string
                pattern: '^[0-9a-fA-F]{24}$'
              - type: array
                items:
                  type: string
                  pattern: '^[0-9a-fA-F]{24}$'
        - name: participatingStaff
          in: query
          description: Filter campaigns where specific staff participates
          required: false
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Health check campaigns retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignListResponse'
        '400':
          description: Invalid query parameters
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error
    post:
      tags:
        - Health Check Campaigns
      summary: Create a new health check campaign
      description: Creates a new health check campaign with DRAFT status
      operationId: createHealthCheckCampaign
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCampaignRequest'
      responses:
        '200':
          description: Health check campaign created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignResponse'
        '400':
          description: Validation errors or missing required fields
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error

  /health-check/campaigns/search:
    get:
      tags:
        - Health Check Campaigns
      summary: Search health check campaigns
      description: Search campaigns by name, school year, or status with quick results
      operationId: searchHealthCheckCampaigns
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search term (required)
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [name, startDate, endDate, createdAt, status, schoolYear]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          description: Maximum number of results (max 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignSearchResponse'
        '400':
          description: Search term is required or invalid
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error

  /health-check/campaigns/stats:
    get:
      tags:
        - Health Check Campaigns
      summary: Get campaign statistics
      description: Retrieves campaign statistics and dashboard data including status breakdown
      operationId: getCampaignStats
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Campaign statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignStatsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error

  /health-check/campaigns/status/{status}:
    get:
      tags:
        - Health Check Campaigns
      summary: Get campaigns by specific status
      description: Retrieves campaigns filtered by a specific status with pagination
      operationId: getCampaignsByStatus
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: path
          description: Campaign status to filter by
          required: true
          schema:
            type: string
            enum: [DRAFT, ANNOUNCED, IN_PROGRESS, COMPLETED, CANCELED]
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [name, startDate, endDate, createdAt, schoolYear]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page (max 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Campaigns by status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignsByStatusResponse'
        '400':
          description: Invalid campaign status
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error

  /health-check/campaigns/{id}:
    get:
      tags:
        - Health Check Campaigns
      summary: Get campaign details
      description: Retrieves detailed information about a specific health check campaign
      operationId: getHealthCheckCampaignDetail
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Campaign ID
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Campaign details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignDetailResponse'
        '404':
          description: Campaign not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error
    put:
      tags:
        - Health Check Campaigns
      summary: Update health check campaign
      description: Updates campaign details (only allowed for DRAFT or ANNOUNCED status)
      operationId: updateHealthCheckCampaign
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Campaign ID
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCampaignRequest'
      responses:
        '200':
          description: Campaign updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignResponse'
        '400':
          description: Validation errors or campaign cannot be updated in current status
        '404':
          description: Campaign not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error

  /health-check/campaigns/{id}/status:
    patch:
      tags:
        - Health Check Campaigns
      summary: Update campaign status
      description: Updates campaign status with proper transition validation and automatic date setting
      operationId: updateCampaignStatus
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Campaign ID
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        '200':
          description: Campaign status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignResponse'
        '400':
          description: Invalid status transition or validation errors
        '404':
          description: Campaign not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error

  /health-check/campaigns/{id}/assignments:
    put:
      tags:
        - Health Check Campaigns
      summary: Assign staff to campaign
      description: Assigns nurses and classes to a health check campaign
      operationId: assignStaffToHealthCheckCampaign
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Campaign ID
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignStaffRequest'
      responses:
        '200':
          description: Staff assigned to campaign successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignResponse'
        '400':
          description: Validation errors or invalid assignments
        '404':
          description: Campaign not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the user
        username:
          type: string
          description: Username for authentication
        email:
          type: string
          description: User's email address
        role:
          type: string
          enum: [Parent, Admin, Teacher]
          description: User's role
        gender:
          type: string
          enum: ['Male', 'Female']
        dob:
          type: string
          format: date
          description: Date of birth for local authentication
        phone:
          type: string
          description: Phone number for local authentication
        isActive:
          type: boolean
          description: Indicates if the user account is active
        googleId:
          type: string
          nullable: true
          description: Google ID for users authenticated via Google
        authProvider:
          type: string
          enum: [local, google]
          description: Authentication provider used
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
      required:
        - _id
        - username
        - email
        - role
        - dob
        - phone
        - isActive
        - authProvider
        - googleId
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - username
        - password
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        email:
          type: string
        gender:
          type: string
          enum: [Male, Female]
        dob:
          type: string
          format: date
        phone:
          type: string
      required:
        - username
        - password
        - email
        - dob
        - phone
        - gender
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: true
        message:
          type: string
          description: Success message
        data:
          type: object
          description: Additional data returned by the operation
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: false
        message:
          type: string
          description: Error message
    AdminDashboardResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/AdminDashboardData'
    UserListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    UserResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/User'
    StudentListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            students:
              type: array
              items:
                $ref: '#/components/schemas/StudentDetail'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    StudentResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/Student'
    ClassListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            classes:
              type: array
              items:
                $ref: '#/components/schemas/Class'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    ClassResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/Class'
    HealthCheckTemplateListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            templates:
              type: array
              items:
                $ref: '#/components/schemas/HealthCheckTemplate'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    HealthCheckTemplateResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/HealthCheckTemplate'
    PartnerListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            partners:
              type: array
              items:
                $ref: '#/components/schemas/HealthcareOrganization'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }
    PartnerResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/HealthcareOrganization'
    PartnerStaffResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/PartnerStaff'
    ManagerInfoResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/ManagerInfo'
    AdminInventoryListResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/AdminInventoryItem'
            total: { type: integer }
            pages: { type: integer }
            currentPage: { type: integer }

    # Schemas cho Models và DTOs
    AdminDashboardData:
      type: object
      properties:
        quickStats:
          $ref: '#/components/schemas/QuickStats'
        healthAnalytics:
          $ref: '#/components/schemas/HealthAnalytics'
        operationalMonitoring:
          $ref: '#/components/schemas/OperationalMonitoring'
    QuickStats:
      type: object
      properties:
        totalStudents: { type: integer }
        incidentsThisWeek: { type: integer }
        pendingMedicationRequests: { type: integer }
        inventoryAlerts: { type: integer }
    HealthAnalytics:
      type: object
      properties:
        healthClassification:
          type: array
          items:
            type: object
            properties:
              classification: { type: string }
              count: { type: integer }
        commonIssues:
          type: array
          items:
            type: object
            properties:
              issue: { type: string }
              studentCount: { type: integer }
        bmiTrend:
          type: array
          items:
            type: object
            properties:
              schoolYear: { type: string }
              averageBmi: { type: number }
    OperationalMonitoring:
      type: object
      properties:
        latestCampaignStatus:
          type: object
          properties:
            name: { type: string }
            total: { type: integer }
            approved: { type: integer }
            declined: { type: integer }
        recentIncidents:
          type: array
          items:
            type: object
            properties:
              _id: { type: string }
              incidentType: { type: string }
              incidentTime: { type: string, format: 'date-time' }
              studentId:
                type: object
                properties:
                  _id: { type: string }
                  fullName: { type: string }
    Student:
      type: object
      properties:
        _id: { type: string }
        parentId: { type: string }
        classId: { type: string, required: true }
        fullName: { type: string, required: true }
        gender: { type: string, enum: ['MALE', 'FEMALE'], required: true }
        dateOfBirth: { type: string, format: date, required: true }
        invitedCode:
          type: object
          properties:
            isActive: { type: boolean, default: true }
            createdAt: { type: string, format: date-time }
        status: { type: string, enum: ['ACTIVE', 'INACTIVE', 'GRADUATED'], required: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    
    StudentDetail:
      type: object
      description: Thông tin chi tiết của học sinh, bao gồm cả thông tin lớp và phụ huynh.
      properties:
        _id: { type: string }
        fullName: { type: string }
        dateOfBirth: { type: string, format: date }
        createdAt: { type: string, format: date-time }
        gender: { type: string, enum: ['MALE', 'FEMALE'] }
        status: { type: string, enum: ['ACTIVE', 'INACTIVE', 'GRADUATED'] }
        parent:
          type: object
          properties:
            _id: { type: string }
            username: { type: string }
            email: { type: string }
        class:
          type: object
          properties:
            _id: { type: string }
            className: { type: string }
    
    CreateStudentRequest:
      type: object
      properties:
        parentId: { type: string }
        classId: { type: string }
        fullName: { type: string }
        gender: { type: string, enum: ['MALE', 'FEMALE'] }
        dateOfBirth: { type: string, format: date }
        status: { type: string, enum: ['ACTIVE', 'INACTIVE', 'GRADUATED'] }
      required: [parentId, classId, fullName, dateOfBirth, gender, status]
    
    UpdateStudentRequest:
      type: object
      properties:
        classId: { type: string }
        fullName: { type: string }
        gender: { type: string, enum: ['MALE', 'FEMALE'] }
        dateOfBirth: { type: string, format: date }
        status: { type: string, enum: ['ACTIVE', 'INACTIVE', 'GRADUATED'] }
    AddRemoveStudentsRequest:
      type: object
      properties:
        studentIds:
          type: array
          items:
            type: string
      required: [studentIds]
    Class:
      type: object
      properties:
        _id: { type: string }
        className: { type: string }
        gradeLevel: { type: integer }
        schoolYear: { type: string }
        totalStudents: { type: integer }
        students:
          type: array
          items:
            type: string # Trả về array of IDs
    CreateClassRequest:
      type: object
      properties:
        className: { type: string }
        gradeLevel: { type: integer }
        schoolYear: { type: string }
      required: [className, gradeLevel, schoolYear]
    HealthCheckTemplate:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        checkupItems:
          type: array
          items:
            $ref: '#/components/schemas/CheckupItem'
        isDefault:
          type: boolean
      required:
        - name
        - checkupItems
        - isDefault
    CheckupItem:
      type: object
      properties:
        itemId:
          type: string
        itemName:
          type: string
        unit:
          type: string
          enum: [kg, cm, mmHg, bpm]
        dataType:
          type: string
          enum: [NUMBER, TEXT, BOOLEAN, SELECT]
        guideline:
          type: string
      required:
        - itemId
        - itemName
        - dataType
    CreateHealthCheckTemplateRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        checkupItems:
          type: array
          items:
            $ref: '#/components/schemas/CheckupItem'
        isDefault: { type: boolean, default: false }
      required: [name, description, type, checkupItems]
    HealthcareOrganization:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        address: { type: string }
        phone: { type: string }
        email: { type: string }
        type: { type: string, enum: [HOSPITAL, CLINIC, HEALTH_CENTER] }
        isActive: { type: boolean }
        managerInfo: { $ref: '#/components/schemas/ManagerInfo' }
        staffMembers:
          type: array
          items: { $ref: '#/components/schemas/PartnerStaff' }
    ManagerInfo:
      type: object
      properties:
        _id: { type: string }
        fullName: { type: string }
        email: { type: string }
        phone: { type: string }
    PartnerStaff:
      type: object
      properties:
        _id: { type: string }
        fullName: { type: string }
        position: { type: string }
        isActive: { type: boolean }
    CreatePartnerRequest:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/UpdatePartnerRequest'
        managerInfo:
          $ref: '#/components/schemas/CreateManagerInfoRequest'
      required: [organization, managerInfo]
    UpdatePartnerRequest:
      type: object
      properties:
        name: { type: string }
        address: { type: string }
        phone: { type: string }
        email: { type: string }
        type: { type: string, enum: [HOSPITAL, CLINIC, HEALTH_CENTER] }
    CreateManagerInfoRequest:
      type: object
      properties:
        fullName: { type: string }
        email: { type: string }
        phone: { type: string }
      required: [fullName, email, phone]
    CreatePartnerStaffRequest:
      type: object
      properties:
        fullName: { type: string }
        position: { type: string }
      required: [fullName]
    AdminInventoryItem:
      type: object
      description: Dữ liệu một vật tư trong kho dành cho Admin, bao gồm cả ngày hết hạn.
      properties:
        _id: { type: string }
        itemName: { type: string }
        unit: { type: string }
        quantityTotal: { type: number }
        lowStockThreshold: { type: number }
        status: { type: string }
        expirationDate: { type: string, format: date }
    HealthCheckCampaign:
      type: object
      properties:
        _id:
          type: string
          description: Campaign ID
        name:
          type: string
          description: Campaign name
        schoolYear:
          type: string
          pattern: '^\d{4}-\d{4}$'
          description: School year in format YYYY-YYYY
        templateId:
          $ref: '#/components/schemas/HealthCheckTemplate'
        startDate:
          type: string
          format: date-time
          description: Planned start date
        endDate:
          type: string
          format: date-time
          nullable: true
          description: Planned end date
        actualStartDate:
          type: string
          format: date-time
          nullable: true
          description: Actual start date (set when status becomes IN_PROGRESS)
        completedDate:
          type: string
          format: date-time
          nullable: true
          description: Completion date (set when status becomes COMPLETED)
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        createdBy:
          $ref: '#/components/schemas/User'
        participatingStaffs:
          type: array
          items:
            type: string
          description: Array of participating staff IDs
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/CampaignAssignment'
          description: Class and nurse assignments
        status:
          type: string
          enum: [DRAFT, ANNOUNCED, IN_PROGRESS, COMPLETED, CANCELED]
          description: Current campaign status

    CampaignAssignment:
      type: object
      properties:
        classId:
          $ref: '#/components/schemas/Class'
        nurseId:
          $ref: '#/components/schemas/User'
      required:
        - classId
        - nurseId

    CreateCampaignRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Campaign name
        templateId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: Health check template ID
        startDate:
          type: string
          format: date-time
          description: Planned start date
        endDate:
          type: string
          format: date-time
          nullable: true
          description: Planned end date (optional)
      required:
        - name
        - templateId
        - startDate

    UpdateCampaignRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Campaign name
        startDate:
          type: string
          format: date-time
          description: Planned start date
        endDate:
          type: string
          format: date-time
          nullable: true
          description: Planned end date

    UpdateStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [DRAFT, ANNOUNCED, IN_PROGRESS, COMPLETED, CANCELED]
          description: New campaign status
      required:
        - status

    AssignStaffRequest:
      type: object
      properties:
        assignments:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              classId:
                type: string
                pattern: '^[0-9a-fA-F]{24}$'
                description: Class ID
              nurseId:
                type: string
                pattern: '^[0-9a-fA-F]{24}$'
                description: Nurse ID
            required:
              - classId
              - nurseId
      required:
        - assignments

    CampaignResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string
        data:
          $ref: '#/components/schemas/HealthCheckCampaign'

    CampaignDetailResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string
        data:
          $ref: '#/components/schemas/HealthCheckCampaign'

    CampaignListResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string
        data:
          type: object
          properties:
            campaigns:
              type: array
              items:
                $ref: '#/components/schemas/HealthCheckCampaign'
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
            filters:
              $ref: '#/components/schemas/AppliedFilters'

    CampaignSearchResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheckCampaign'

    CampaignsByStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string
        data:
          type: object
          properties:
            campaigns:
              type: array
              items:
                $ref: '#/components/schemas/HealthCheckCampaign'
            pagination:
              $ref: '#/components/schemas/PaginationInfo'

    CampaignStatsResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string
        data:
          $ref: '#/components/schemas/CampaignStats'

    CampaignStats:
      type: object
      properties:
        totalCampaigns:
          type: integer
          description: Total number of campaigns
        currentSchoolYear:
          type: string
          description: Current school year
        currentYearCampaigns:
          type: integer
          description: Number of campaigns in current school year
        statusBreakdown:
          type: array
          items:
            $ref: '#/components/schemas/StatusBreakdown'
        availableStatuses:
          type: array
          items:
            type: string
            enum: [DRAFT, ANNOUNCED, IN_PROGRESS, COMPLETED, CANCELED]

    StatusBreakdown:
      type: object
      properties:
        status:
          type: string
          enum: [DRAFT, ANNOUNCED, IN_PROGRESS, COMPLETED, CANCELED]
        count:
          type: integer
          description: Number of campaigns with this status
        recentCampaigns:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              createdAt:
                type: string
                format: date-time

    PaginationInfo:
      type: object
      properties:
        currentPage:
          type: integer
          description: Current page number
        totalPages:
          type: integer
          description: Total number of pages
        totalCount:
          type: integer
          description: Total number of items
        limit:
          type: integer
          description: Items per page
        hasNextPage:
          type: boolean
          description: Whether there is a next page
        hasPrevPage:
          type: boolean
          description: Whether there is a previous page

    AppliedFilters:
      type: object
      properties:
        search:
          type: string
          nullable: true
        status:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: true
        schoolYear:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: true
        sortBy:
          type: string
        sortOrder:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Token truy cập thiếu hoặc không hợp lệ.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Người dùng không có quyền truy cập vào tài nguyên này.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
